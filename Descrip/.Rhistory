library(tmap)
library(stringr)
# ─── Leer shapefile y filtrar Huila ───────────────────────────────────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- suppressMessages(st_read(shp_path))
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO))
# ─── Obtener centroide de Neiva ───────────────────────────────────────────────
neiva <- huila %>% filter(MPIO_CNMBR == "NEIVA")
neiva_centroid <- st_centroid(neiva)
# ─── Calcular distancias desde cada municipio al centroide de Neiva ───────────
huila_dist <- huila %>%
mutate(
centroide = st_centroid(geometry),
distancia_km = as.numeric(st_distance(
st_geometry(centroide),
st_geometry(neiva_centroid)[[1]],  # 🔁 Solo la geometría de Neiva
by_element = FALSE
)) / 1000
)
# ─── Librerías ────────────────────────────────────────────────────────────────
library(sf)
library(dplyr)
library(tmap)
library(stringr)
# ─── Leer shapefile y filtrar Huila ───────────────────────────────────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- suppressMessages(st_read(shp_path))
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO))
# ─── Obtener centroide de Neiva ───────────────────────────────────────────────
neiva <- huila %>% filter(MPIO_CNMBR == "NEIVA")
neiva_centroid <- st_centroid(neiva)
# ─── Calcular distancias desde cada municipio al centroide de Neiva ───────────
huila_dist <- huila %>%
mutate(
centroide = st_centroid(geometry),
distancia_km = as.numeric(st_distance(
st_geometry(centroide),
st_geometry(neiva_centroid)[[1]],  # 🔁 Solo la geometría de Neiva
by_element = FALSE
)) / 1000
)
# ─── Librerías ────────────────────────────────────────────────
library(sf)
library(dplyr)
library(tmap)
library(stringr)
# ─── Leer shapefile y filtrar Huila ──────────────────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- suppressMessages(st_read(shp_path))
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(
MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO)
)
# ─── Reproyectar al CRS adecuado para medición (EPSG: 3116) ──
huila_proj <- st_transform(huila, crs = 3116)
# ─── Centroide de Neiva ───────────────────────────────────────
neiva_proj <- huila_proj %>% filter(MPIO_CNMBR == "NEIVA")
neiva_centroid <- st_centroid(neiva_proj)
# ─── Calcular distancias (en km) ──────────────────────────────
huila_dist <- huila_proj %>%
mutate(
centroide = st_centroid(geometry),
distancia_km = as.numeric(st_distance(
centroide,
st_geometry(neiva_centroid)[[1]],
by_element = TRUE
)) / 1000  # de metros a kilómetros
)
# ─── Librerías ────────────────────────────────────────────────
library(sf)
library(dplyr)
library(tmap)
library(stringr)
# ─── Leer shapefile y filtrar Huila ──────────────────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- suppressMessages(st_read(shp_path))
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(
MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO)
)
# ─── Reproyectar todo al CRS EPSG:3116 ───────────────────────
huila_proj <- st_transform(huila, crs = 3116)
# ─── Calcular centroides de todos y de Neiva ─────────────────
huila_proj <- huila_proj %>%
mutate(centroide = st_centroid(geometry))
neiva_centroid <- huila_proj %>%
filter(MPIO_CNMBR == "NEIVA") %>%
pull(centroide)
# ─── Calcular distancias desde cada municipio a Neiva ────────
huila_dist <- huila_proj %>%
mutate(
distancia_km = as.numeric(st_distance(centroide, neiva_centroid)) / 1000
)
# ─── Revisar distancias (opcional) ───────────────────────────
print(huila_dist %>% select(MPIO_CNMBR, distancia_km))
# ─── Mapa interactivo de distancias ───────────────────────────
tmap_mode("view")
tm_shape(huila_dist) +
tm_polygons(
col = "distancia_km",
palette = "Blues",
id = "MPIO_CNMBR",
popup.vars = c("Distancia a Neiva (km)" = "distancia_km")
) +
tm_view(set.view = c(-75.6, 2.6, 8))
# ───────────────
# Leer shapefile de municipios de Colombia
# ───────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- suppressMessages(st_read(shp_path))
# ───────────────
# Filtrar municipios del Huila
# ───────────────
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(
MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), width = 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO)
)
# ───────────────
# Leer archivo de IPM por municipio del Huila
# ───────────────
ipm_data <- suppressMessages(
read_csv(file.path("Datos", "huila_2021.csv"),
col_types = cols(ipm = col_character()))
) %>%
clean_names() %>%
mutate(
clase = str_remove_all(clase, ",")  # 👈 elimina comas
) %>%
filter(str_to_lower(clase) == "total") %>%
mutate(
ipm = str_replace(ipm, ",", "."),
ipm = as.numeric(ipm),
cod_municipio = as.character(cod_municipio)
)
# ───────────────
# Unir shapefile con datos IPM
# ───────────────
huila_ipm <- left_join(huila, ipm_data, by = "cod_municipio")
# ───────────────
# Activar modo interactivo
# ───────────────
tmap_mode("view")
# ───────────────
# Crear mapa interactivo con popup
# ───────────────
tm_shape(huila_ipm) +
tm_polygons(
col = "ipm",
palette = "Reds",
id = "MPIO_CNMBR",
popup.vars = c("IPM:" = "ipm")
) +
tm_view(set.view = c(-75.6, 2.6, 8))  # ¡Usa set.view para tmap v3!
# ───────────────
# Leer shapefile de municipios de Colombia
# ───────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- st_read(shp_path, quiet = TRUE)
# ───────────────
# Filtrar municipios del Huila
# ───────────────
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(
MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), width = 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO)
)
# ───────────────
# Leer archivo de IPM por municipio del Huila
# ───────────────
ipm_data <- suppressMessages(
read_csv(file.path("Datos", "huila_2021.csv"),
col_types = cols(ipm = col_character()))
) %>%
clean_names() %>%
mutate(
clase = str_remove_all(clase, ",")  # 👈 elimina comas
) %>%
filter(str_to_lower(clase) == "total") %>%
mutate(
ipm = str_replace(ipm, ",", "."),
ipm = as.numeric(ipm),
cod_municipio = as.character(cod_municipio)
)
# ───────────────
# Unir shapefile con datos IPM
# ───────────────
huila_ipm <- left_join(huila, ipm_data, by = "cod_municipio")
# ───────────────
# Activar modo interactivo
# ───────────────
tmap_mode("view")
# ───────────────
# Crear mapa interactivo con popup
# ───────────────
tm_shape(huila_ipm) +
tm_polygons(
col = "ipm",
palette = "Reds",
id = "MPIO_CNMBR",
popup.vars = c("IPM:" = "ipm")
) +
tm_view(set.view = c(-75.6, 2.6, 8))  # ¡Usa set.view para tmap v3!
# ─── Leer shapefile de municipios de Colombia ──────────────────────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- st_read(shp_path, quiet = TRUE)
# ─── Filtrar municipios del Huila ──────────────────────────────────────────
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(
MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), width = 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO)
)
# ─── Leer y limpiar datos NBI ──────────────────────────────────────────────
nbi_data <- read_csv("Datos/NBI.csv",
locale = locale(decimal_mark = ","),
show_col_types = FALSE) %>%
clean_names() %>%
mutate(
clase = str_trim(str_remove(clase, ",")),                     # Limpiar comas
cod_municipio = str_pad(as.character(cod_municipio), 5, pad = "0")  # Formato uniforme
) %>%
filter(
str_to_lower(clase) == "total",   # Solo registros "Total"
anio == 2018                      # Solo año 2018
)
# ─── Join shapefile con datos NBI ──────────────────────────────────────────
huila_nbi <- left_join(huila, nbi_data, by = "cod_municipio")
# ─── Crear mapa interactivo con popup ──────────────────────────────────────
tmap_mode("view")
tm_shape(huila_nbi) +
tm_polygons(
col = "personas_nbi",               # Puedes cambiar a otra variable
palette = "Reds",
id = "MPIO_CNMBR",
popup.vars = c(
"Municipio" = "municipio",
"Hacinamiento" = "hacinamiento",
"Servicios" = "servicios",
"Vivienda" = "vivienda",
"Personas NBI" = "personas_nbi",
"Inasistencia" = "inasistencia",
"Miseria" = "miseria"
)
) +
tm_view(set.view = c(-75.6, 2.6, 8))  # Centrar vista en Huila
# ─── Leer shapefile y filtrar Huila ──────────────────────────
shp_path <- file.path("Datos", "MGN_2021_COLOMBIA", "ADMINISTRATIVO", "MGN_MPIO_POLITICO.shp")
colombia <- st_read(shp_path, quiet = TRUE)
huila <- colombia %>%
filter(DPTO_CNMBR == "HUILA") %>%
mutate(
MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), 3, pad = "0"),
cod_municipio = paste0("41", MPIO_CCDGO)
)
# ─── Reproyectar todo al CRS EPSG:3116 ───────────────────────
huila_proj <- st_transform(huila, crs = 3116)
# ─── Calcular centroides de todos y de Neiva ─────────────────
huila_proj <- huila_proj %>%
mutate(centroide = st_centroid(geometry))
neiva_centroid <- huila_proj %>%
filter(MPIO_CNMBR == "NEIVA") %>%
pull(centroide)
# ─── Calcular distancias desde cada municipio a Neiva ────────
huila_dist <- huila_proj %>%
mutate(
distancia_km = as.numeric(st_distance(centroide, neiva_centroid)) / 1000
)
# ─── Revisar distancias (opcional) ───────────────────────────
#print(huila_dist %>% select(MPIO_CNMBR, distancia_km))
# ─── Mapa interactivo de distancias ───────────────────────────
tmap_mode("view")
tm_shape(huila_dist) +
tm_polygons(
col = "distancia_km",
palette = "Blues",
id = "MPIO_CNMBR",
popup.vars = c("Distancia a Neiva (km)" = "distancia_km")
) +
tm_view(set.view = c(-75.6, 2.6, 8))
{r, echo=FALSE, message=FALSE, warning=FALSE} # Código del primer mapa IPM
bjj
# ─── Leer hoja 'Municipios 2023' del archivo Excel ──────────────────────────────
idf_data <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
) %>%
clean_names() %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_dane), 5, pad = "0"),
idf_2023 = as.numeric(indice_de_desempeno_fiscal)
) %>%
select(cod_municipio, municipio, idf_2023)
# ─── Leer hoja 'Municipios 2023' del archivo Excel ──────────────────────────────
idf_data <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
) %>%
clean_names() %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_dane), 5, pad = "0"),
idf_2023 = as.numeric(indice_de_desempeno_fiscal)
) %>%
select(cod_municipio, municipio, idf_2023)
# ───────────────
# Cargar librerías
# ───────────────
suppressPackageStartupMessages({
library(tidyverse)   # Manejo de datos
library(sf)          # Datos espaciales
library(tmap)        # Mapas temáticos
library(readxl)
library(janitor)     # Limpieza de nombres
library(readr)       # Lectura de CSVs
library(dplyr)
library(stringr)
})
options(tmap.show.messages = FALSE)
# ─── Leer hoja 'Municipios 2023' del archivo Excel ──────────────────────────────
idf_data <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
) %>%
clean_names() %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_dane), 5, pad = "0"),
idf_2023 = as.numeric(indice_de_desempeno_fiscal)
) %>%
select(cod_municipio, municipio, idf_2023)
idf_data_raw <- read_excel(
path = "Datos/ResultadosID.xlsx",
sheet = "Municipios 2023",
skip = 8
)
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
)
glimpse(idf_data_raw)
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
)
glimpse(idf_data_raw)
# Cargar sin omitir filas
head(read_excel("Datos/ResultadosIDF.xlsx", sheet = "Municipios 2023", skip = 0), 10)
# Cargar sin omitir filas
head(read_excel("Datos/ResultadosIDF.xlsx", sheet = "Municipios 2023", skip = 0), 10)
# ─── Leer datos del IDF 2023 ────────────────────────────────────────────────
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF_Nueva_MetodologIa_2023_Act.xlsx",
sheet = "Municipios 2023",
skip = 8
)
# ───────────────
# Cargar librerías
# ───────────────
suppressPackageStartupMessages({
library(tidyverse)   # Manejo de datos
library(sf)          # Datos espaciales
library(tmap)        # Mapas temáticos
library(readxl)
library(janitor)     # Limpieza de nombres
library(readr)       # Lectura de CSVs
library(dplyr)
library(stringr)
})
options(tmap.show.messages = FALSE)
# ─── Leer datos del IDF 2023 ────────────────────────────────────────────────
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF_Nueva_MetodologIa_2023_Act.xlsx",
sheet = "Municipios 2023",
skip = 8
)
# ─── Leer datos del IDF 2023 ────────────────────────────────────────────────
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
)
# ─── Renombrar columnas y seleccionar necesarias ───────────────────────────
idf_data <- idf_data_raw %>%
rename(
cod_municipio = 1,        # Código DANE del municipio
departamento = 2,         # Nombre del departamento
municipio = 3,            # Nombre del municipio
idf_2023 = 17             # Índice de desempeño fiscal (posición puede variar)
) %>%
select(cod_municipio, departamento, municipio, idf_2023) %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_municipio), 5, pad = "0"),
idf_2023 = as.numeric(idf_2023)
)
# ─── Unir datos del IDF con shapefile del Huila ────────────────────────────
huila_idf <- left_join(huila, idf_data, by = "cod_municipio")
# ─── Leer datos del IDF 2023 ────────────────────────────────────────────────
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
)
# ─── Renombrar columnas y seleccionar necesarias ───────────────────────────
idf_data <- idf_data_raw %>%
rename(
cod_municipio = 1,        # Código DANE del municipio
departamento = 2,         # Nombre del departamento
municipio = 3,            # Nombre del municipio
idf_2023 = 17             # Índice de desempeño fiscal (posición puede variar)
) %>%
select(cod_municipio, departamento, municipio, idf_2023) %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_municipio), 5, pad = "0"),
idf_2023 = as.numeric(idf_2023)
)
# ─── Unir datos del IDF con shapefile del Huila ────────────────────────────
huila_idf <- left_join(huila, idf_data, by = "cod_municipio")
# ─── Mapa interactivo del IDF ──────────────────────────────────────────────
tmap_mode("view")
tm_shape(huila_idf) +
tm_polygons(
col = "idf_2023",
palette = "Greens",
id = "MPIO_CNMBR",
popup.vars = c("Municipio" = "municipio", "IDF 2023" = "idf_2023")
) +
tm_view(set.view = c(-75.6, 2.6, 8))
# ─── Leer datos del IDF 2023 ────────────────────────────────────────────────
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
)
# ─── Renombrar columnas y seleccionar necesarias ───────────────────────────
idf_data <- idf_data_raw %>%
rename(
cod_municipio = 1,        # Código DANE del municipio
departamento = 2,         # Nombre del departamento
municipio = 3,            # Nombre del municipio
idf_2023 = 17             # Índice de desempeño fiscal (posición puede variar)
) %>%
select(cod_municipio, departamento, municipio, idf_2023) %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_municipio), 5, pad = "0"),
idf_2023 = as.numeric(idf_2023)
)
# ─── Unir datos del IDF con shapefile del Huila ────────────────────────────
huila_idf <- left_join(huila, idf_data, by = "cod_municipio")
# ─── Mapa interactivo del IDF ──────────────────────────────────────────────
tmap_mode("view")
tm_shape(huila_idf) +
tm_polygons(
col = "idf_2023",
palette = "Greens",
id = "MPIO_CNMBR",
popup.vars = c("Municipio" = "municipio", "IDF 2023" = "idf_2023")
) +
tm_view(set.view = c(-75.6, 2.6, 8))
# ─── Leer datos del IDF 2023 ────────────────────────────────────────────────
idf_data_raw <- read_excel(
path = "Datos/ResultadosIDF.xlsx",
sheet = "Municipios 2023",
skip = 8
)
# ─── Renombrar columnas y seleccionar necesarias ───────────────────────────
idf_data <- idf_data_raw %>%
rename(
cod_municipio = 1,        # Código DANE del municipio
departamento = 2,         # Nombre del departamento
municipio = 3,            # Nombre del municipio
idf_2023 = 17             # Índice de desempeño fiscal (posición puede variar)
) %>%
select(cod_municipio, departamento, municipio, idf_2023) %>%
filter(departamento == "HUILA") %>%
mutate(
cod_municipio = str_pad(as.character(cod_municipio), 5, pad = "0"),
idf_2023 = as.numeric(idf_2023)
)
# ─── Unir datos del IDF con shapefile del Huila ────────────────────────────
huila_idf <- left_join(huila, idf_data, by = "cod_municipio")
# ─── Mapa interactivo del IDF ──────────────────────────────────────────────
tmap_mode("view")
tm_shape(huila_idf) +
tm_polygons(
col = "idf_2023",
palette = "Greens",
id = "MPIO_CNMBR",
popup.vars = c("Municipio" = "municipio", "IDF 2023" = "idf_2023")
) +
tm_view(set.view = c(-75.6, 2.6, 8))
